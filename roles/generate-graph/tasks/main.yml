---
- name: Search all contaienrs name
  shell: "curl -G 'http://{{ docker_swarm_addr }}:8086/query?pretty=true' --data-urlencode 'db=telegraf-{{ inventory_hostname }}' --data-urlencode 'q=show tag values from docker_container_cpu with key = container_name'" 
  register: query_result 
 
- set_fact: 
    query_result_output: "{{ query_result.stdout|from_json}}" 
 
- set_fact:  
    container_names: [] 
- set_fact:   
    container_names: "{{ container_names }} + ['{{ item }}']"   
  when: "'{{ item}}' !=  'container_name'" 
  with_items: "{{ query_result_output['results'][0]['series'][0]['values'] }}" 
 
- debug:  
    msg: "{{container_names}}" 
 
- name: Create template for each container in every host 
  template:  
    src: dashboard_container.json.j2 
    dest: "{{ sto_dir }}/templates/{{ inventory_hostname }}/{{ item }}.json" 
    mode: 0644 
  with_items: "{{ container_names }}" 
  vars: 
    - container_name: "{{ item }}" 
  
- name: Push containers dashboard into Grafana
  shell: "curl -X POST -i -u admin:admin -H 'Content-Type: application/json' -d @{{ sto_dir }}/templates/{{ inventory_hostname }}/{{ item }}.json http://:3000/api/dashboards/db"
  with_items: "{{ container_names }}"

- name : Create template for each node
  template: 
    src: dashboard_monitoring.json.j2
    dest: "{{ sto_dir }}/templates/{{ inventory_hostname }}/{{ inventory_hostname }}.json"
    mode: 0644

- name: Push nodes dashboard into Grafana
  shell: "curl -X POST -i -u admin:admin -H 'Content-Type: application/json' -d @{{ sto_dir }}/templates/{{ inventory_hostname }}/{{ inventory_hostname }}.json http://:3000/api/dashboards/db"
